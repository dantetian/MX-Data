import "P_Asset.proto";

package Adoter.Asset;

/////////////////////////////////////////////////////
//
// 游戏中各种存盘、属性、基础数据结构定义
//
// Client<->Server公共使用，单独服务器使用的数据格式请勿在此定义
//
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
// 通用数据定义区
/////////////////////////////////////////////////////

//账号
message Account {
	optional bytes username = 1;
	optional bytes password = 2;
}

//单张牌
message PaiElement { 
	optional CARD_TYPE card_type = 1; //牌类型：饼、条...
	optional int32 card_value = 2; //牌值
	optional int32 card_index = 3; //牌在表中索引:校验用
}

//使用物品错误
enum ERR_USE_ITEM_TYPE {
	ERR_USE_ITEM_TYPE_SUCCESS = 0; //成功
	ERR_USE_ITEM_TYPE_LEVEL_BELOW = 1; //级别不够
	ERR_USE_ITEM_TYPE_LEVEL_UP = 2; //级别太高

}

/////////////////////////////////////////////////////
// 游戏基本属性定义区
/////////////////////////////////////////////////////

//账号数据：存盘数据
message User {
	optional Account account = 1; //账号
	repeated int64 player_list = 2; //玩家角色
}

//玩家座次
enum POSITION_TYPE {
	POSITION_TYPE_NULL = 0; 
	POSITION_TYPE_EAST = 1; //东
	POSITION_TYPE_SOUTH = 2; //南
	POSITION_TYPE_WEST = 3; //西
	POSITION_TYPE_NORTH = 4; //北
}

//加载场景类型
enum LOAD_SCENE_TYPE {
	LOAD_SCENE_TYPE_NULL = 1; //无状态
	LOAD_SCENE_TYPE_START = 2; //开始加载
	LOAD_SCENE_TYPE_SUCCESS = 3; //结束加载：成功
	LOAD_SCENE_TYPE_FAILED = 4; //结束加载：失败
}

//玩家临时属性，不存盘
message PlayerProp {
	optional bool online = 1; //是否在线
	optional POSITION_TYPE position = 2; //玩家座次
	optional int64 room_id = 3; //房间ID
	optional LOAD_SCENE_TYPE load_type = 4; //场景加载
	optional GAME_OPER_TYPE game_oper_state = 5; //玩家状态
	optional bool check_feng_gang = 6; //旋风杠检查
	optional bool check_jian_gang = 7; //旋风杠检查
	optional int32 pai_oper_count = 8; //玩家操作次数
}

//游戏记录
message GameRecord {
	message GameElement {
		optional int64 player_id = 1; //玩家ID
		optional int32 score = 2; //积分变化
	}
	repeated GameElement list = 1;
}

//房间记录数据
message RoomHistory {
	optional int64 room_id = 1; //房间ID
	repeated GameRecord list = 2; //列表
}

//玩家公共数据 
message CommonProp {
	optional int64 player_id = 1; //玩家ID
	optional int32 local_server_id = 2; //注册服务器
	optional bytes name = 3; //名字
	optional int32 level = 4 [ default = 1 ]; //级别
	optional GENDER_TYPE gender = 5 [ default = GENDER_TYPE_MAN]; //性别
	optional int64 diamond = 6; //钻石总数 
	optional int64 huanledou = 7; //欢乐豆数 
	optional int64 total_rounds = 8; //参加的总局数 
	optional int64 total_win_rounds = 9; //赢牌局数
	optional int64 streak_wins = 10; //最高连胜
	optional int64 score = 11; //积分
	repeated int64 room_history = 12; //历史房间数据
}

//通用限制：存盘数据
message PlayerCommonLimit {
	message Element {
		optional int64 common_limit_id = 1; //通用限制ID[CommonLimit]数据
		optional int32 time_stamp = 2; //更新的时间戳
		optional int32 count = 3; //当前次数
	}
	repeated Element elements = 1;
}
//冷却：存盘数据
message PlayerCoolDown {
	message Element {
		optional int64 cool_down_id = 1; //通用限制ID[CoolDown]数据
		optional int32 time_stamp = 2; //更新的时间戳
	}
	repeated Element elements = 1;
}

//邮件附件
message MailAttachment {
	optional int64 common_reward_id = 1; //通用奖励[CommonReward]数据
}

//邮件
message Mail {
	optional bytes title = 1; //标题
	optional bytes send_player = 2 [ default = "系统邮件" ]; //发件人
	optional bytes content = 3; //内容
	optional int32 send_time = 4; //发送时间
	optional bool readed = 5; //是否已读
	optional MailAttachment attachment = 6; //邮件附件
}

//玩家信息
message Player {
	optional CommonProp common_prop = 1; //公共属性(存储[CommonProp]字段)
	optional int64 server_id = 2; //服务器ID
	optional Inventory inventory = 3; //玩家包裹
	optional PlayerCommonLimit common_limit = 4; //通用限制
	optional PlayerCoolDown cool_down = 5; //冷却
	optional int32 login_time = 6; //登陆时间
	optional int32 logout_time = 7; //登出时间
	repeated int32 sign_time = 8; //签到时间

	repeated Mail mail_list = 10; //邮件列表

//////////////非存盘数据结构
	optional PlayerProp player_prop = 20; //玩家临时状态数据
}

//包裹结构
message Inventory {
	message Element {
		optional INVENTORY_TYPE inventory_type = 1;
		repeated Item_Item items = 2; //包裹中存储的物品信息
	}
	repeated Element inventory = 1; //多个包裹(根据INVENTORY_TYPE_COUNT自动调整数量，所以无用包裹请勿增加[INVENTORY_TYPE]类型)
}

/////////////////////////////////////////////////////
// 物品逻辑存盘数据定义区
/////////////////////////////////////////////////////
message ItemEquipment {
	optional int32 star = 1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//
// Client<->Server协议
//
// 1.Server<->Client交互通过协议Meta传送，其中包含内容类型和内容MESSAGE数据;
//
// 2.每个协议必须包含META_TYPE，否则双方无法处理;
//
/////////////////////////////////////////////////////

message Meta {
	optional META_TYPE type_t = 1;
	optional bytes stuff = 2;
}

/////////////////////////////////////////////////////
//客户端和服务器公用的数据定义区
/////////////////////////////////////////////////////

//通用错误码定义
enum ERROR_TYPE {
	ERROR_TYPE_NORMAL = 1;
	ERROR_TYPE_INVENTORY_FULL = 2; //包裹已满
}

enum ERROR_SHOW_TYPE {
	ERROR_SHOW_TYPE_CHAT = 1;
}

enum ERROR_CODE {
	ERROR_SUCCESS = 0; //成功
	ERROR_INNER = 1; //系统内部错误
	ERROR_DIAMOND_NOT_ENOUGH = 2; //钻石不足
	ERROR_BEANS_NOT_ENOUGH = 3;	//欢乐豆不足
	ERROR_INVENTORY_FULL = 4; //物品栏已满
	ERROR_REWARD_HAS_GOT = 5; //奖励已领取
	ERROR_HUANLEDOU_LIMIT = 6; //每日福利:欢乐豆不满足领取数量限制
	ERROR_MALL_NOT_FOUND = 7; //商品未找到
	ERROR_ACTIVITY_NOT_OPEN = 8; //活动尚未开启
	ERROR_CLIENT_DATA = 9; //Client数据错误
	ERROR_HAS_NO_PLAYER = 10; //该账号下没有这个角色

	ERROR_ROOM_NOT_FOUNT = 20; //房间未找到
	ERROR_ROOM_PASSWORD = 21; //房间密码错误
	ERROR_ROOM_IS_FULL = 22; //房间玩家已满
	ERROR_ROOM_NOT_AVAILABLE = 23; //没有可进入的房间
	ERROR_ROOM_NO_PERMISSION = 24; //没有权限进行此操作
	ERROR_ROOM_BEANS_MIN_LIMIT = 25; //加入房间，欢乐豆不满足下限
	ERROR_ROOM_BEANS_MAX_LIMIT = 26; //加入房间，欢乐豆不满足上限
	ERROR_ROOM_TYPE_NOT_FOUND = 27; //未找到该类型的房间
	ERROR_ROOM_HAS_BEEN_IN = 28; //已经在房间内
	
	ERROR_GAME_NO_PERMISSION = 40; //没有操作权限
	ERROR_GAME_PAI_UNSATISFIED = 41; //牌不满足
}

/////////////////////////////////////////////////////
//通用协议类型
/////////////////////////////////////////////////////
enum META_TYPE {

	///////////公共协议定义///////////
	META_TYPE_SHARE_BEGIN = 1; //开始协议
	META_TYPE_SHARE_CREATE_PLAYER = 2; //创建角色
	META_TYPE_SHARE_CREATE_ROOM = 3; //创建房间
	META_TYPE_SHARE_PAI_OPERATION = 4; //玩家牌操作
	META_TYPE_SHARE_GAME_OPERATION = 5; //玩家游戏操作
	META_TYPE_SHARE_COMMON_PROPERTY = 6; //玩家基础属性同步
	META_TYPE_SHARE_BUY_SOMETHING = 7; //购买商品：游戏内商品交易
	META_TYPE_SHARE_ENTER_ROOM = 8; //进入房间
	META_TYPE_SHARE_SIGN = 9; //签到
	META_TYPE_SHARE_LUCKY_PLATE = 10; //幸运转盘
	META_TYPE_SHARE_COUNT = 50; //共享协议最大数量
	///////////客户端发送数据///////////
	META_TYPE_C2S_BEGIN = 51; //客户端开始协议
	META_TYPE_C2S_LOGIN = 52; //登录游戏
	META_TYPE_C2S_LOGOUT = 53; //退出游戏
	META_TYPE_C2S_SELECT_SERVER = 54; //选择服务器
	META_TYPE_C2S_ENTER_GAME = 55; //进入游戏(选择的角色)
	META_TYPE_C2S_GET_REWARD = 56; //领取奖励
	META_TYPE_C2S_LOAD_SCENE = 57; //加载场景
	META_TYPE_C2S_COUNT = 255; //客户端协议最大数量
	///////////服务器发送数据///////////
	META_TYPE_S2C_BEGIN = 501; //服务器开始协议
	META_TYPE_S2C_TICKET = 502; //登录认证
	META_TYPE_S2C_SERVER_LIST = 503; //游戏服务器列表(AS->C)
	META_TYPE_S2C_PLAYERS = 504; //同步账号下角色数据(AS->C)      
	META_TYPE_S2C_PLAYER_INFO = 505; //同步玩家角色数据(登录之后同步)
	META_TYPE_S2C_ALERT_ERROR = 507; //错误码信息
	META_TYPE_S2C_COMMON_OPERATION_RESPONSE = 508; //通用操作返回协议
	META_TYPE_S2C_PAI_NOTIFY = 509; //通知Client玩家手中的牌或抓到的牌
	META_TYPE_S2C_PAI_OPERATION_ALERT = 510; //提示玩家可以进行的操作
	META_TYPE_S2C_COMMON_LIMIT = 511; //通用限制:主要用于Client界面控制
	META_TYPE_S2C_COMMON_REWARD = 512; //通用奖励
	META_TYPE_S2C_ROOM_INFO = 513; //同步房间数据
	META_TYPE_S2C_GAME_CACULATE = 514; //游戏结束结算
	META_TYPE_S2C_COUNT = 1000; //服务器协议最大数量
	///////////服务器之间收发送数据///////////
	META_TYPE_S2S_BEGIN = 1001; //开始协议
	META_TYPE_S2S_REGISTER = 1002; //注册服务器
	META_TYPE_S2S_COUNT = 1500; //协议最大数量
}
/////////////////////////////////////////////////////
//客户端发送协议定义区
/////////////////////////////////////////////////////

//创建角色
message CreatePlayer {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_CREATE_PLAYER ];
	optional int64 player_id = 2;
}

//登录游戏
message Login {
	optional META_TYPE type_t = 1 [ default = META_TYPE_C2S_LOGIN ];
	optional Account account = 2;
}

//退出游戏
message Logout {
	optional META_TYPE type_t = 1 [ default = META_TYPE_C2S_LOGOUT ];
}

//进入游戏：实际进入的是游戏大厅
message EnterGame {
	optional META_TYPE type_t = 1 [ default = META_TYPE_C2S_ENTER_GAME ];
	optional int64 player_id = 2; //角色ID
}

//房间数据
message Room {
	optional int64 room_id = 1; //房间ID
	optional ROOM_TYPE room_type = 2; //房间信息
	optional bytes enter_password = 3; //房间密码：仅好友房存在
	optional RoomOptions options = 4; //房间设置
}

/////////////////////////////////////////////////////
//好友房开放设置：
//
//模式选择：经典模式  高番模式
//
//额外番型：站立胡 带夹胡 旋风杠 宝牌 可断门 清一色
//
//封顶倍数：16倍 32倍 不封顶(0)
//
//开设局数：4局  8局
/////////////////////////////////////////////////////

//模式选择
enum ROOM_MODEL_TYPE {
	ROOM_MODEL_TYPE_CLASSICAL = 1; //经典模式
	ROOM_MODEL_TYPE_MULTIPLE = 2; //高番模式
}

//额外番型
enum ROOM_EXTEND_TYPE {
	ROOM_EXTEND_TYPE_ZHANLIHU = 1; //站立胡
	ROOM_EXTEND_TYPE_JIAHU = 2; //夹胡
	ROOM_EXTEND_TYPE_XUANFENGGANG = 3; //旋风杠
	ROOM_EXTEND_TYPE_BAOPAI = 4; //宝牌
	ROOM_EXTEND_TYPE_DUANMEN = 5; //可断门
	ROOM_EXTEND_TYPE_QIYISE = 6; //清一色
}

//房间设置
message RoomOptions {
	optional ROOM_MODEL_TYPE model = 1; //模式选择
	repeated ROOM_EXTEND_TYPE extend_type = 2; //额外番型
	optional int32 top_mutiple = 3; //封顶倍数
	optional int32 open_rands = 4 [ default = 4 ]; //局数：4局 8局
}

//创建房间
message CreateRoom {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_CREATE_ROOM ];
	optional Room room = 2; //房间信息
}

//进入房间
message EnterRoom {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_ENTER_ROOM ];
	optional Room room = 2; //房间信息
	optional ERROR_CODE error_code = 3; //返回结果：是否可以进入
	enum ENTER_TYPE {
		ENTER_TYPE_ENTER = 1; //进入
		ENTER_TYPE_CANCEL = 2; //取消进入，适合在匹配过程取消
	}
	optional ENTER_TYPE enter_type = 4; //操作类型
}

//签到
message Sign {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_SIGN ];
	optional bool success = 2; //签到成功
}

//幸运转盘
message PlayerLuckyPlate {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_LUCKY_PLATE ];
	optional int64 plate_id = 2; //幸运转盘ID[LuckyPlate]数据
	optional int32 result = 3; //转到奖励索引
}

//获取奖励
message GetReward {
	optional META_TYPE type_t = 1 [ default = META_TYPE_C2S_GET_REWARD ];
	enum GET_REWARD_REASON {
		GET_REWARD_REASON_DAILY_BONUS = 1; //每日登陆奖励
		GET_REWARD_REASON_DAILY_ALLOWANCE = 2; //每日补助奖励
	}
	optional GET_REWARD_REASON reason = 2;
	optional int64 reward_id = 3;
}

enum PAI_CHECK_RETURN {
	PAI_CHECK_RETURN_NULL = 0; //无法操作
	PAI_CHECK_RETURN_HU = 1; //胡牌
	PAI_CHECK_RETURN_GANG = 2; //杠牌
	PAI_CHECK_RETURN_PENG = 3; //碰牌
	PAI_CHECK_RETURN_CHI = 4; //吃牌
	PAI_CHECK_GANG_XUANFENG_FENG = 5; //旋风杠：风牌
	PAI_CHECK_GANG_XUANFENG_JIAN = 6; //旋风杠：箭牌
	PAI_CHECK_RETURN_ANGANG = 7; //暗杠
}

//牌操作超时限制
message PaiOperationLimit {
	optional int64 player_id = 1; //操作玩家
	optional int64 from_player_id = 2; //牌来自玩家
	optional int32 time_out = 3; //超时时间
	optional PaiElement pai = 4; //待处理的牌
	optional PAI_CHECK_RETURN oper_limit = 5; //最高操作权限
}

message PaiOperationList {
	optional int64 player_id = 1; //操作玩家
	optional int64 from_player_id = 2; //牌来自玩家
	optional int32 time_out = 3; //超时时间
	optional PaiElement pai = 4; //待处理的牌
	repeated PAI_CHECK_RETURN oper_list = 5; //可操作列表
}

//牌操作
message PaiOperation {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_PAI_OPERATION ];
	enum PAI_OPER_TYPE {
		PAI_OPER_TYPE_DAPAI = 1; //打牌
		PAI_OPER_TYPE_HUPAI = 2; //胡牌
		PAI_OPER_TYPE_GANGPAI = 3; //杠牌
		PAI_OPER_TYPE_PENGPAI = 4; //碰牌
		PAI_OPER_TYPE_CHIPAI = 5; //吃牌
		PAI_OPER_TYPE_GIVEUP = 6; //放弃
		PAI_OPER_TYPE_XUANFENG_FENG = 7; //旋风杠：风牌
		PAI_OPER_TYPE_XUANFENG_JIAN = 8; //旋风杠：箭牌
		PAI_OPER_TYPE_ANGANGPAI = 9; //暗杠牌
	}
	optional PAI_OPER_TYPE oper_type = 2; //牌操作
	optional POSITION_TYPE position = 3; //位置
	repeated PaiElement pais = 4; //牌数据
	optional PaiElement pai = 5; //牌数据
}

//游戏内操作
enum GAME_OPER_TYPE {
	GAME_OPER_TYPE_NULL = 1; //无状态
	GAME_OPER_TYPE_START = 2; //开始游戏
	GAME_OPER_TYPE_LEAVE = 3; //离开游戏
	GAME_OPER_TYPE_KICKOUT = 4; //踢人
}

//游戏操作
message GameOperation {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_GAME_OPERATION ];
	optional GAME_OPER_TYPE oper_type = 2; //操作类型
	optional int64 source_player_id = 3; //来自XX玩家的操作
	optional int64 destination_player_id = 4; //针对XX玩家的操作：踢人
}

//商城购买
message BuySomething {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_BUY_SOMETHING ];
	optional int64 mall_id = 2; //购买商品ID[Mall]数据
	optional int32 result = 3; //购买结果(0-成功)
}

//加载场景
message LoadScene {
	optional META_TYPE type_t = 1 [ default = META_TYPE_C2S_LOAD_SCENE ];
	optional LOAD_SCENE_TYPE load_type = 2; //加载进度
	optional int64 scene_id = 3; //加载的场景ID///房间ID
}
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//服务器发送协议定义区
/////////////////////////////////////////////////////

//同步账号下角色数据
message PlayerList {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_PLAYERS ];
	repeated int64 player_list = 2; //角色ID
}

//同步玩家角色数据
message PlayerInformation {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_PLAYER_INFO ];
	optional Player player = 2;
}

//错误码提示
message AlertMessage {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_ALERT_ERROR ];
	optional ERROR_TYPE error_type = 2;
	optional ERROR_SHOW_TYPE error_show_type = 3;
	optional ERROR_CODE error_code = 4;
}

//通用操作返回协议，模拟RPC处理流程
message CommonOperationResponse {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_COMMON_OPERATION_RESPONSE ];
	optional META_TYPE client_type_t = 2;
	optional bytes client_message = 3;
}

//麻将数据同步
message PaiNotify {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_PAI_NOTIFY ];
	//发送牌数据缘由
	enum CARDS_DATA_TYPE {
		CARDS_DATA_TYPE_START = 1; //开局
		CARDS_DATA_TYPE_FAPAI = 2; //发牌
		CARDS_DATA_TYPE_SYNC = 3; //同步
	}
	optional CARDS_DATA_TYPE data_type = 2; //缘由
	//多张牌数据 
	message MutiPai { 
		optional CARD_TYPE card_type = 1; //牌类型：饼、条...
		repeated int32 cards = 2; //牌值
	}
	repeated MutiPai pais = 3; //数据：开局，发13或14张牌
	//单张牌数据 
	message SinglePai { 
		optional CARD_TYPE card_type = 1; //牌类型：饼、条...
		optional int32 card_value = 2; //牌值
	}
	optional SinglePai pai = 4; //数据：发牌，发1张牌
}

//玩家基础属性同步
message CommonProperty {
	optional META_TYPE type_t = 1 [ default = META_TYPE_SHARE_COMMON_PROPERTY ];
	//同步数据的原由
	enum SYNC_REASON_TYPE { 
		SYNC_REASON_TYPE_SELF = 1; //发送玩家自己数据,可能是因为改了角色名称//欢乐豆变化//钻石变化...
		SYNC_REASON_TYPE_ENTER_ROOM = 2; //加入房间:发送其他玩家的数据
	}
	optional SYNC_REASON_TYPE reason_type = 2;
	optional int64 player_id = 3; //XX玩家的数据
	optional CommonProp common_prop = 4; //玩家基本数据
}

//提示玩家可以进行的操作
message PaiOperationAlert {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_PAI_OPERATION_ALERT ];
	repeated PAI_CHECK_RETURN check_return = 2; //返回结果：玩家当前可操作的所有情况
	optional PaiElement pai = 3; //牌数据
	repeated PaiElement pais = 4; //牌数据
}

//通用限制数据同步
message SyncCommonLimit {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_COMMON_LIMIT ];
	optional PlayerCommonLimit common_limit = 2; //玩家所有通用限制数据
}

//通用奖励
message SyncCommonReward {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_COMMON_REWARD ];
	optional int64 common_reward_id = 2; //通用奖励ID[CommonReward]数据
}

//房间数据
message RoomInformation {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_ROOM_INFO ];
	message Player {
		optional POSITION_TYPE position = 1; //位置
		optional CommonProp common_prop = 2; //玩家基本数据
	}
	repeated Player player_list = 2;
}

//游戏结算
message GameCaculate {
	optional META_TYPE type_t = 1 [ default = META_TYPE_S2C_GAME_CACULATE ];
	optional GameRecord record = 2; //积分结算
}
